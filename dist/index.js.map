{"version":3,"sources":["../src/core.ts"],"sourcesContent":["import { parsePhoneNumberFromString, getCountryCallingCode } from 'libphonenumber-js';\n\nexport type FormatStyle = 'E164' | 'international' | 'national';\n\nexport type ValidateResult =\n  | { valid: true; e164: string; country?: string }\n  | { valid: false; reason: 'country_not_detected' | 'cannot_parse' | 'invalid_number' };\n\nexport function detectCountry(input: string): string | null {\n  const s = input.trim();\n  // Try by explicit + code first\n  if (s.startsWith('+')) {\n    const parsed = parsePhoneNumberFromString(s);\n    return parsed?.country ?? null;\n  }\n  // Without +, still try to parse (may infer from default/ambiguous)\n  const p = parsePhoneNumberFromString(s);\n  return p?.country ?? null;\n}\n\nexport function validate(input: string, country?: string): ValidateResult {\n  const s = input.trim();\n  const parsed = country\n    ? parsePhoneNumberFromString(s, country as any)\n    : parsePhoneNumberFromString(s);\n\n  if (!parsed) return { valid: false, reason: 'cannot_parse' };\n  if (!parsed.country && !country) return { valid: false, reason: 'country_not_detected' };\n\n  return parsed.isValid()\n    ? { valid: true, e164: parsed.number, country: parsed.country }\n    : { valid: false, reason: 'invalid_number' };\n}\n\nexport function format(input: string, style: FormatStyle = 'international', country?: string): string {\n  const parsed = country\n    ? parsePhoneNumberFromString(input, country as any)\n    : parsePhoneNumberFromString(input);\n  if (!parsed) return input;\n\n  switch (style) {\n    case 'E164': return parsed.number; // +XXXXXXXX\n    case 'international': return parsed.formatInternational();\n    case 'national': return parsed.formatNational();\n  }\n}\n\nexport function parse(input: string) {\n  const p = parsePhoneNumberFromString(input);\n  if (!p) return null;\n  return {\n    country: p.country ?? null,\n    e164: p.number,\n    national: p.formatNational(),\n    international: p.formatInternational(),\n    type: p.getType?.() // mobile/fixed_line/etc (if available)\n  };\n}\n\n/** Lightweight typing mask:\n *  - preserves leading '+'\n *  - inserts spaces for readability while typing\n *  - once a valid number is reached, prefer lib formatInternational()\n */\nexport function mask(raw: string): string {\n  const str = raw.replace(/[^\\d+]/g, '');\n  // if already parsable, show pretty format\n  const p = parsePhoneNumberFromString(str);\n  if (p) return p.formatInternational();\n\n  // naive spacing for partially typed input\n  const plus = str.startsWith('+') ? '+' : '';\n  const digits = str.replace(/\\D/g, '');\n  // group into chunks: +XXX XXX XXX XXXX â€¦\n  const groups: string[] = [];\n  for (let i = 0; i < digits.length; i += 3) groups.push(digits.slice(i, i + 3));\n  return plus + groups.join(' ');\n}\n\nexport function getDialCode(countryIso2: string): string | null {\n  try {\n    const code = getCountryCallingCode(countryIso2 as any);\n    return '+' + code;\n  } catch {\n    return null;\n  }\n}\n"],"mappings":";AAAA,SAAS,4BAA4B,6BAA6B;AAQ3D,SAAS,cAAc,OAA8B;AAC1D,QAAM,IAAI,MAAM,KAAK;AAErB,MAAI,EAAE,WAAW,GAAG,GAAG;AACrB,UAAM,SAAS,2BAA2B,CAAC;AAC3C,WAAO,QAAQ,WAAW;AAAA,EAC5B;AAEA,QAAM,IAAI,2BAA2B,CAAC;AACtC,SAAO,GAAG,WAAW;AACvB;AAEO,SAAS,SAAS,OAAe,SAAkC;AACxE,QAAM,IAAI,MAAM,KAAK;AACrB,QAAM,SAAS,UACX,2BAA2B,GAAG,OAAc,IAC5C,2BAA2B,CAAC;AAEhC,MAAI,CAAC,OAAQ,QAAO,EAAE,OAAO,OAAO,QAAQ,eAAe;AAC3D,MAAI,CAAC,OAAO,WAAW,CAAC,QAAS,QAAO,EAAE,OAAO,OAAO,QAAQ,uBAAuB;AAEvF,SAAO,OAAO,QAAQ,IAClB,EAAE,OAAO,MAAM,MAAM,OAAO,QAAQ,SAAS,OAAO,QAAQ,IAC5D,EAAE,OAAO,OAAO,QAAQ,iBAAiB;AAC/C;AAEO,SAAS,OAAO,OAAe,QAAqB,iBAAiB,SAA0B;AACpG,QAAM,SAAS,UACX,2BAA2B,OAAO,OAAc,IAChD,2BAA2B,KAAK;AACpC,MAAI,CAAC,OAAQ,QAAO;AAEpB,UAAQ,OAAO;AAAA,IACb,KAAK;AAAQ,aAAO,OAAO;AAAA;AAAA,IAC3B,KAAK;AAAiB,aAAO,OAAO,oBAAoB;AAAA,IACxD,KAAK;AAAY,aAAO,OAAO,eAAe;AAAA,EAChD;AACF;AAEO,SAAS,MAAM,OAAe;AACnC,QAAM,IAAI,2BAA2B,KAAK;AAC1C,MAAI,CAAC,EAAG,QAAO;AACf,SAAO;AAAA,IACL,SAAS,EAAE,WAAW;AAAA,IACtB,MAAM,EAAE;AAAA,IACR,UAAU,EAAE,eAAe;AAAA,IAC3B,eAAe,EAAE,oBAAoB;AAAA,IACrC,MAAM,EAAE,UAAU;AAAA;AAAA,EACpB;AACF;AAOO,SAAS,KAAK,KAAqB;AACxC,QAAM,MAAM,IAAI,QAAQ,WAAW,EAAE;AAErC,QAAM,IAAI,2BAA2B,GAAG;AACxC,MAAI,EAAG,QAAO,EAAE,oBAAoB;AAGpC,QAAM,OAAO,IAAI,WAAW,GAAG,IAAI,MAAM;AACzC,QAAM,SAAS,IAAI,QAAQ,OAAO,EAAE;AAEpC,QAAM,SAAmB,CAAC;AAC1B,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK,EAAG,QAAO,KAAK,OAAO,MAAM,GAAG,IAAI,CAAC,CAAC;AAC7E,SAAO,OAAO,OAAO,KAAK,GAAG;AAC/B;AAEO,SAAS,YAAY,aAAoC;AAC9D,MAAI;AACF,UAAM,OAAO,sBAAsB,WAAkB;AACrD,WAAO,MAAM;AAAA,EACf,QAAQ;AACN,WAAO;AAAA,EACT;AACF;","names":[]}