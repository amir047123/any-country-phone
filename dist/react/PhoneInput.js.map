{"version":3,"sources":["../../src/react/PhoneInput.tsx","../../src/core.ts"],"sourcesContent":["import * as React from 'react';\nimport { detectCountry, validate, mask, format, getDialCode } from '../core';\n\nexport type PhoneInputProps = {\n  value?: string;\n  country?: string;                 // lock to a country (e.g., \"BD\", \"IT\", \"US\") — optional\n  onChange?: (val: string) => void;\n  onValidChange?: (valid: boolean, e164?: string, country?: string) => void;\n  placeholder?: string;\n  className?: string;\n  showHint?: boolean;\n};\n\nexport default function PhoneInput({\n  value = '',\n  country,\n  onChange,\n  onValidChange,\n  placeholder = 'Enter phone number',\n  className,\n  showHint = true\n}: PhoneInputProps) {\n  const [val, setVal] = React.useState(value);\n  const [iso, setIso] = React.useState(country);\n\n  React.useEffect(() => {\n    const detected = country ?? detectCountry(val) ?? undefined;\n    setIso(detected);\n    const res = validate(val, detected);\n    onValidChange?.(res.valid, res.valid ? res.e164 : undefined, res.valid ? res.country : undefined);\n  }, [val, country]);\n\n  function handleInput(e: React.ChangeEvent<HTMLInputElement>) {\n    const raw = e.target.value;\n    const masked = mask(raw);\n    setVal(masked);\n    onChange?.(masked);\n  }\n\n  const hint = (() => {\n    const detected = iso;\n    const res = validate(val, detected);\n    if (!res.valid) return '';\n    try { return format(val, 'international', detected); } catch { return ''; }\n  })();\n\n  const dial = iso ? getDialCode(iso) : '';\n\n  return (\n    <div className={className} style={{ display: 'grid', gap: 6 }}>\n      <div style={{ display: 'flex', gap: 8 }}>\n        <input\n          value={val}\n          onChange={handleInput}\n          placeholder={placeholder}\n          inputMode=\"tel\"\n          aria-label=\"Phone number\"\n          style={{ flex: 1, border: '1px solid #ccc', borderRadius: 6, padding: '8px 10px' }}\n        />\n        <div aria-label=\"Detected dial code\" style={{ minWidth: 70, textAlign: 'center', padding: '8px 10px', border: '1px solid #eee', borderRadius: 6 }}>\n          {dial ?? ''}\n        </div>\n      </div>\n      {showHint && <small style={{ minHeight: 18, color: '#666' }}>{hint}</small>}\n    </div>\n  );\n}\n","import { parsePhoneNumberFromString, getCountryCallingCode } from 'libphonenumber-js';\n\nexport type FormatStyle = 'E164' | 'international' | 'national';\n\nexport type ValidateResult =\n  | { valid: true; e164: string; country?: string }\n  | { valid: false; reason: 'country_not_detected' | 'cannot_parse' | 'invalid_number' };\n\nexport function detectCountry(input: string): string | null {\n  const s = input.trim();\n  // Try by explicit + code first\n  if (s.startsWith('+')) {\n    const parsed = parsePhoneNumberFromString(s);\n    return parsed?.country ?? null;\n  }\n  // Without +, still try to parse (may infer from default/ambiguous)\n  const p = parsePhoneNumberFromString(s);\n  return p?.country ?? null;\n}\n\nexport function validate(input: string, country?: string): ValidateResult {\n  const s = input.trim();\n  const parsed = country\n    ? parsePhoneNumberFromString(s, country as any)\n    : parsePhoneNumberFromString(s);\n\n  if (!parsed) return { valid: false, reason: 'cannot_parse' };\n  if (!parsed.country && !country) return { valid: false, reason: 'country_not_detected' };\n\n  return parsed.isValid()\n    ? { valid: true, e164: parsed.number, country: parsed.country }\n    : { valid: false, reason: 'invalid_number' };\n}\n\nexport function format(input: string, style: FormatStyle = 'international', country?: string): string {\n  const parsed = country\n    ? parsePhoneNumberFromString(input, country as any)\n    : parsePhoneNumberFromString(input);\n  if (!parsed) return input;\n\n  switch (style) {\n    case 'E164': return parsed.number; // +XXXXXXXX\n    case 'international': return parsed.formatInternational();\n    case 'national': return parsed.formatNational();\n  }\n}\n\nexport function parse(input: string) {\n  const p = parsePhoneNumberFromString(input);\n  if (!p) return null;\n  return {\n    country: p.country ?? null,\n    e164: p.number,\n    national: p.formatNational(),\n    international: p.formatInternational(),\n    type: p.getType?.() // mobile/fixed_line/etc (if available)\n  };\n}\n\n/** Lightweight typing mask:\n *  - preserves leading '+'\n *  - inserts spaces for readability while typing\n *  - once a valid number is reached, prefer lib formatInternational()\n */\nexport function mask(raw: string): string {\n  const str = raw.replace(/[^\\d+]/g, '');\n  // if already parsable, show pretty format\n  const p = parsePhoneNumberFromString(str);\n  if (p) return p.formatInternational();\n\n  // naive spacing for partially typed input\n  const plus = str.startsWith('+') ? '+' : '';\n  const digits = str.replace(/\\D/g, '');\n  // group into chunks: +XXX XXX XXX XXXX …\n  const groups: string[] = [];\n  for (let i = 0; i < digits.length; i += 3) groups.push(digits.slice(i, i + 3));\n  return plus + groups.join(' ');\n}\n\nexport function getDialCode(countryIso2: string): string | null {\n  try {\n    const code = getCountryCallingCode(countryIso2 as any);\n    return '+' + code;\n  } catch {\n    return null;\n  }\n}\n"],"mappings":"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","names":[]}